; Program name
.program linkcable

.wrap_target
    set  x, 6
    wait 0 gpio 18 [0]       ; wait for falling edge and wait 0 cycles
    pull noblock             ; pull value for transmission from pico
    out null, 24             ; shift left by 24
    out pins, 1              ; out the MSB bit
    wait 1 gpio 18 [2]       ; wait for rising edge and wait 2 cycles
bitloop:
        in pins, 1           ; input bit
        wait 0 gpio 18 [2]   ; wait for falling edge and wait 2 cycles
        out pins, 1          ; output rest of the bits one by one
        wait 1 gpio 18 [1]   ; wait for rising edge and wait 1 cycles
    jmp x-- bitloop          ; loop through the rest of the bits
    in pins, 1               ; input rest of the bits one by one
    push noblock             ; push the received value to pico
    irq 0
.wrap

% c-sdk {
#define PIN_SCK             18
#define PIN_SIN             16
#define PIN_SOUT            19

static inline void linkcable_program_init(PIO pio, uint sm, uint offset, uint BitsNum) {
    pio_sm_config c = linkcable_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SCK, 1, false);

    sm_config_set_in_pins(&c, PIN_SIN);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SIN, 1, false);
    sm_config_set_in_shift(&c, false, false, BitsNum);

    sm_config_set_out_pins(&c, PIN_SOUT, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SOUT, 1, true);
    sm_config_set_out_shift(&c, false, false, BitsNum);

//    sm_config_set_clkdiv(&c, 5);                // Set clock division (Commented out, this one runs at full speed)

    pio_gpio_init(pio, PIN_SCK);
    pio_gpio_init(pio, PIN_SIN);
    pio_gpio_init(pio, PIN_SOUT);

    pio_sm_init(pio, sm, offset, &c);

//    pio_sm_set_enabled(pio, sm, true);          // Set the state machine running (commented out, I'll start this in the C)
}
%}